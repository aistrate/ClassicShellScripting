\input texinfo   @c -*-texinfo-*-
@setfilename myspell.info

@comment ===============================================================
@comment WARNING: Do NOT edit this file.  It was produced automatically
@comment by man2info on Fri Jul 11 06:11:48 MDT 2003
@comment for beebe@psi.math.utah.edu
@comment from myspell.man
@comment in /u/sy/beebe/xml/shbook/man
@comment ===============================================================

@comment @documentencoding ISO-8859-1

@comment troff -man typesetting style: headers, footers, no paragraph indentation

@paragraphindent none

@iftex
@parskip = 0.5@normalbaselineskip plus 3pt minus 1pt
@end iftex

@set lq ``
@set rq ''

@comment  ========================================================
@comment TROFF INPUT: .TH MYSPELL 1 "25 June 2003" "1.00"

@headings off
@everyheading MYSPELL(1) @| @| MYSPELL(1)
@everyfooting 25 June 2003 @| @thispage @| 1.00

@node Top

@chapter MYSPELL 1 "25 June 2003" "1.00
@c DEBUG: print_menu("Top")

@ifnottex
@menu
* NAME::
* SYNOPSIS::
* DESCRIPTION::
* OPTIONS::
* EXAMPLES::
* DICTIONARIES::
* SUFFIX RULES::
* FILES::
* SEE ALSO::
* BUGS::
* AUTHOR::

@end menu
@end ifnottex


@comment  ========================================================
@comment TROFF INPUT: .SH NAME

@node NAME

@section NAME
@c DEBUG: print_menu("NAME")

myspell @r{---} report spelling exceptions
@comment  ========================================================
@comment TROFF INPUT: .SH SYNOPSIS

@node SYNOPSIS

@section SYNOPSIS
@c DEBUG: print_menu("SYNOPSIS")

@comment TROFF INPUT: .B myspell
@b{myspell}
[
@comment TROFF INPUT: .B \-?
@b{@minus{}?}
]
[
@comment TROFF INPUT: .BI \-dictionary " dictfile"
@b{@minus{}dictionary}@i{ dictfile}
]
[
@comment TROFF INPUT: .B \-help
@b{@minus{}help}
]
@comment TROFF INPUT: .if n .ti +\w'\fBmyspell\fP\ 'u
@comment .if n .ti +\w'@b{myspell}@tie{}'u
[
@comment TROFF INPUT: .BI \-locale " name"
@b{@minus{}locale}@i{ name}
]
[
@comment TROFF INPUT: .BI \-privatedictionary " dictfile"
@b{@minus{}privatedictionary}@i{ dictfile}
]
@comment TROFF INPUT: .if n .ti +\w'\fBmyspell\fP\ 'u
@comment .if n .ti +\w'@b{myspell}@tie{}'u
@comment TROFF INPUT: .if t .ti +\w'\fBmyspell\fP\ 'u
@comment .if t .ti +\w'@b{myspell}@tie{}'u
[
@comment TROFF INPUT: .BI \-suffixrules " rulefile"
@b{@minus{}suffixrules}@i{ rulefile}
]
[
@comment TROFF INPUT: .B \-verbose
@b{@minus{}verbose}
]
@comment TROFF INPUT: .if n .ti +\w'\fBmyspell\fP\ 'u
@comment .if n .ti +\w'@b{myspell}@tie{}'u
[
@comment TROFF INPUT: .B \-version
@b{@minus{}version}
]
[
@comment TROFF INPUT: .B +dictfile
@b{+dictfile}
]
[
@comment TROFF INPUT: .B =rulefile
@b{=rulefile}
]
@comment TROFF INPUT: .if n .ti +\w'\fBmyspell\fP\ 'u
@comment .if n .ti +\w'@b{myspell}@tie{}'u
[
@comment TROFF INPUT: .B \-\|\-
@b{@minus{}@dmn{}@minus{}}
]
[
@comment TROFF INPUT: .I file(s)
@i{file(s)}
]
@comment  ========================================================
@comment TROFF INPUT: .SH DESCRIPTION

@node DESCRIPTION

@section DESCRIPTION
@c DEBUG: print_menu("DESCRIPTION")

@comment TROFF INPUT: .B myspell
@b{myspell}
(pronounced
@comment TROFF INPUT: .IR misspell )
@i{misspell}@r{)}
reports spelling exceptions (i.e., words from files, or
@comment TROFF INPUT: .IR stdin ,
@i{stdin}@r{,}
that are not found in the combined system and private
dictionaries, possibly after stripping word suffixes) as a
sorted list of unique words, or locators and words, on
@comment TROFF INPUT: .IR stdout .
@i{stdout}@r{.}
@comment TROFF INPUT: .PP

A word to be spell checked may contain any ASCII letter or
apostrophe, or any character in the range 128@dmn{}.@dmn{}.@dmn{}255.
All other characters are silently ignored.
@comment TROFF INPUT: .PP

With suitable locale-specific dictionaries, and optionally,
suffix rules,
@comment TROFF INPUT: .B myspell
@b{myspell}
can check spelling for files in any human language that can
be encoded in ASCII, or any of the ISO 8859-n code pages, or
Unicode in UTF-8 encoding, provided that whitespace
separates words.  [Languages that lack word separators, such
as Lao and Thai, require sophisticated grammatical analysis
to identify words.]  For Unicode, some prefiltering may be
needed to remove Unicode punctuation (otherwise, it will
simply be reported as spelling exceptions).
@comment TROFF INPUT: .PP

If the files to be spell checked contain document markup,
that markup should usually be stripped by a suitable initial
filter step; see the
@comment TROFF INPUT: .B EXAMPLES
@b{EXAMPLES}
section below.
@comment  ========================================================
@comment TROFF INPUT: .SH OPTIONS

@node OPTIONS

@section OPTIONS
@c DEBUG: print_menu("OPTIONS")

@comment TROFF INPUT: .B myspell
@b{myspell}
options can be prefixed with either one or two hyphens, and
can be abbreviated to any unique prefix.  Thus,
@comment TROFF INPUT: .BR \-h ,
@b{@minus{}h}@r{,}
@comment TROFF INPUT: .BR \-hel ,
@b{@minus{}hel}@r{,}
and
@comment TROFF INPUT: .B \-\|\-help
@b{@minus{}@dmn{}@minus{}help}
are equivalent.
@comment TROFF INPUT: .PP

To avoid confusion with options, if a filename begins with a
hyphen, it must be disguised by a leading absolute or
relative directory path, e.g.,
@comment TROFF INPUT: .I /tmp/-foo
@i{/tmp/-foo}
or
@comment TROFF INPUT: .IR ./-foo .
@i{./-foo}@r{.}
Alternatively, precede the file list with the
@comment TROFF INPUT: .B \-\|\-
@b{@minus{}@dmn{}@minus{}}
option.
@comment  --------------------------------------------------------
@comment TROFF INPUT: .TP \w'\fB\-version\fP'u+3n
@comment TROFF INPUT: .B \-\|\-

@c ---------------------------------------------------------------------
@table @code
@item @b{@minus{}@dmn{}@minus{}}
Everything following on the command line is a filename, even
if it looks like an option.
@comment  --------------------------------------------------------
@comment TROFF INPUT: .TP
@comment TROFF INPUT: .B \-?

@item @b{@minus{}?}
Same as
@comment TROFF INPUT: .BR \-help .
@b{@minus{}help}@r{.}
@comment  --------------------------------------------------------
@comment TROFF INPUT: .TP
@comment TROFF INPUT: .BI \-dictionary  " dictfile"

@item @b{@minus{}dictionary}@i{ dictfile}
Add
@comment TROFF INPUT: .I dictfile
@i{dictfile}
to the list of system dictionaries.  If a locale is set,
there may be locale-dependent dictionaries already in the
list.  This option may be used any number of times.
@comment TROFF INPUT: .IP

If this option is not specified, and no locale is set, then
@comment TROFF INPUT: .B myspell
@b{myspell}
will use a built-in list of system dictionaries.
@comment  --------------------------------------------------------
@comment TROFF INPUT: .TP
@comment TROFF INPUT: .B \-help

@item @b{@minus{}help}
Display a brief help message on
@comment TROFF INPUT: .IR stderr ,
@i{stderr}@r{,}
giving a usage description, and then terminate immediately
with a success return code.
@comment  --------------------------------------------------------
@comment TROFF INPUT: .TP
@comment TROFF INPUT: .BI \-locale " name"

@item @b{@minus{}locale}@i{ name}
Set the locale temporarily to
@comment TROFF INPUT: .IR name ,
@i{name}@r{,}
which must be an ISO country code and name of a directory in
the
@comment TROFF INPUT: .B myspell
@b{myspell}
installation tree.  This selects the language of the
documents to be spell checked.
@comment  --------------------------------------------------------
@comment TROFF INPUT: .TP
@comment TROFF INPUT: .BI \-privatedictionary " dictfile"

@item @b{@minus{}privatedictionary}@i{ dictfile}
Add the private dictionary
@comment TROFF INPUT: .I dictfile
@i{dictfile}
to the list of private dictionaries that augment the system
dictionary.  Typically, this is a document-specific list of
exceptional words known to be correctly spelled.  This
option may be used any number of times.
@comment TROFF INPUT: .IP

For
@comment TROFF INPUT: .BR spell (1)
@b{spell}@r{(1)}
compatibility, this option may be abbreviated to
@comment TROFF INPUT: .IR +dictfile .
@i{+dictfile}@r{.}
@comment  --------------------------------------------------------
@comment TROFF INPUT: .TP
@comment TROFF INPUT: .BI \-strip

@item @b{@minus{}strip}
Strip word suffixes according to user-defined or
locale-specific rules.  This usually reduces the number of
false reports.
@comment  --------------------------------------------------------
@comment TROFF INPUT: .TP
@comment TROFF INPUT: .BI \-suffixrules " rulefile"

@item @b{@minus{}suffixrules}@i{ rulefile}
Supply additional suffix rules in
@comment TROFF INPUT: .IR rulefile .
@i{rulefile}@r{.}
@comment TROFF INPUT: .IP

This option may be abbreviated to
@comment TROFF INPUT: .IR =rulefile .
@i{=rulefile}@r{.}
@comment  --------------------------------------------------------
@comment TROFF INPUT: .TP
@comment TROFF INPUT: .BI \-verbose

@item @b{@minus{}verbose}
Include a location report of the form
@comment TROFF INPUT: .I filename:linenumber:
@i{filename:linenumber:}
as a prefix of every spelling exception, and sort the report
by location.  This option may be abbreviated to a single
letter.
@comment  --------------------------------------------------------
@comment TROFF INPUT: .TP
@comment TROFF INPUT: .B \-version

@item @b{@minus{}version}
Display the program version number and release date on
@comment TROFF INPUT: .IR stderr ,
@i{stderr}@r{,}
and then terminate immediately with a success return code.
@comment  --------------------------------------------------------
@comment TROFF INPUT: .TP
@comment TROFF INPUT: .B +dictfile

@item @b{+dictfile}
Shorthand for
@comment TROFF INPUT: .BI \-privatedictionary " dictfile."
@b{@minus{}privatedictionary}@i{ dictfile.}
This option may be used any number of times (unlike in
@comment TROFF INPUT: .BR spell (1)).
@b{spell}@r{(1)).}
@comment  --------------------------------------------------------
@comment TROFF INPUT: .TP
@comment TROFF INPUT: .B =rulefile

@item @b{=rulefile}
Shorthand for
@comment TROFF INPUT: .BI \-suffixrules " rulefile."
@b{@minus{}suffixrules}@i{ rulefile.}
This option may be used any number of times.
@comment  ========================================================
@comment TROFF INPUT: .SH EXAMPLES

@end table

@c ---------------------------------------------------------------------

@node EXAMPLES

@section EXAMPLES
@c DEBUG: print_menu("EXAMPLES")

In these examples, we use file suffixes of @t{.ser}
(spelling errors) for exception lists, and @t{.sok}
(spelling okay) for private dictionaries, but these are
merely conventions, without significance for
@comment TROFF INPUT: .BR myspell .
@b{myspell}@r{.}
@comment TROFF INPUT: .RS

@c ---------------------------------------------------------------------
@quotation
@comment TROFF INPUT: .nf

@c ---------------------------------------------------------------------
@display
@t{myspell report.txt > report.ser
myspell +report.sok report.txt > report.ser
deroff *.rno | myspell -s french.sfx > temp.ser
detex *.tex | myspell -p mydict.sok > temp.ser
dehtml *.html | myspell -l fr =french.sfx > temp.ser
dexml *.xml | myspell -locale da > temp.ser
dexml *.xml | myspell -l da =danish.sfx > temp.ser}
@comment TROFF INPUT: .fi

@end display

@c ---------------------------------------------------------------------
@comment TROFF INPUT: .RE

@end quotation

@c ---------------------------------------------------------------------
@comment  ========================================================
@comment TROFF INPUT: .SH DICTIONARIES

@node DICTIONARIES

@section DICTIONARIES
@c DEBUG: print_menu("DICTIONARIES")

Dictionaries are simply lists of words known to be correctly
spelled, stored one word per line, without any leading or
trailing whitespace.  Unlike dictionaries for other spell
checkers, those for
@comment TROFF INPUT: .B myspell
@b{myspell}
need not be sorted.  However, if dictionaries are to be
shared between spell checkers, they should be kept sorted,
and for each language, the locale used for the sort must be
consistent.
@comment TROFF INPUT: .PP

Once the input is free of spelling errors, the output of
@comment TROFF INPUT: .B myspell
@b{myspell}
will be a list of exceptional words that are not in the
current dictionaries, but are known to be correct.  They can
be added to a private dictionary that is used on subsequent
runs, thereby reducing the size of future reports.
@comment TROFF INPUT: .PP

There are numerous sources of word lists for various
languages on the Internet (search for
@comment TROFF INPUT: .I "word list"
@i{word list}
with your favorite search engine), e.g.,
@comment TROFF INPUT: .RS

@c ---------------------------------------------------------------------
@quotation
@comment TROFF INPUT: .nf

@c ---------------------------------------------------------------------
@display
@t{ftp://ftp.ox.ac.uk/pub/wordlists/
ftp://ibiblio.org/pub/docs/books/gutenberg/etext96/pgw*
ftp://qiclab.scn.rain.com/pub/wordlists/
http://www.phreak.org/html/wordlists.shtml}
@comment TROFF INPUT: .fi

@end display

@c ---------------------------------------------------------------------
@comment TROFF INPUT: .RE

@end quotation

@c ---------------------------------------------------------------------
Dictionaries for other spell checkers can usually be
trivially adapted for use with
@comment TROFF INPUT: .BR myspell .
@b{myspell}@r{.}
@comment TROFF INPUT: .PP

In addition, any corpus of text in a single language that is
known to be relatively free of errors can be easily filtered
with
@comment TROFF INPUT: .BR tr (1)
@b{tr}@r{(1)}
and
@comment TROFF INPUT: .BR sort (1)
@b{sort}@r{(1)}
to produce a candidate spelling dictionary for any
language that is not yet supported by
@comment TROFF INPUT: .BR myspell .
@b{myspell}@r{.}
Internet archives of articles, books, reports, theses, and
even news stories can often be readily located by Web search
engines.
@comment  ========================================================
@comment TROFF INPUT: .SH "SUFFIX RULES"

@node SUFFIX RULES

@section SUFFIX RULES
@c DEBUG: print_menu("SUFFIX RULES")

Suffix rules guide reduction of the input word lists to
reduce dictionary sizes and reduce false reports.  As such,
they are
@comment TROFF INPUT: .IR "entirely optional" .
@i{entirely optional}@r{.}
@comment TROFF INPUT: .PP

Suffix rules are defined in simple text files that contain
one rule per line, beginning with a suffix regular
expression, and followed by a possibly-empty list of
replacement suffixes, one of which may be the empty string,
indicated by adjacent quotation marks. Comments run from
sharp (#) to end of line, and blank lines are ignored.
@comment TROFF INPUT: .PP

Here is a short example for English:
@comment TROFF INPUT: .RS

@c ---------------------------------------------------------------------
@quotation
@comment TROFF INPUT: .nf

@c ---------------------------------------------------------------------
@display
@t{
'$                      # Jones' -> Jones
's$                     # it's -> it
ed$     "" e            # breaded -> bread, flamed -> flame
ied$    ie y            # died -> die, cried -> cry
ly$     ""              # acutely -> acute
s$                      # cats -> cat}
@comment TROFF INPUT: .fi

@end display

@c ---------------------------------------------------------------------
@comment TROFF INPUT: .RE

@end quotation

@c ---------------------------------------------------------------------
@comment TROFF INPUT: .PP

While suffix rules suffice for many Indo-European languages,
others don't need them at all, and still others have more
complex changes in spelling as words change in case, number,
or tense.  For such languages, the simplest solution seems
to be a larger dictionary that incorporates at least all of
the common word forms.
@comment  ========================================================
@comment TROFF INPUT: .SH FILES

@node FILES

@section FILES
@c DEBUG: print_menu("FILES")

@comment ---------------------------------------------------------
@comment TROFF INPUT: .TP
@comment TROFF INPUT: .I /usr/local/share/myspell/myspell-x.y.z/locale/XX/*.dict

@c ---------------------------------------------------------------------
@table @code
@item @i{/usr/local/share/myspell/myspell-x.y.z/locale/XX/*.dict}
Default dictionaries for locale
@comment TROFF INPUT: .IR XX .
@i{XX}@r{.}
@comment ---------------------------------------------------------
@comment TROFF INPUT: .TP
@comment TROFF INPUT: .I /usr/local/share/myspell/myspell-x.y.z/locale/XX/*.sfx

@item @i{/usr/local/share/myspell/myspell-x.y.z/locale/XX/*.sfx}
Default suffix rules for locale
@comment TROFF INPUT: .IR XX .
@i{XX}@r{.}
@comment ---------------------------------------------------------
@comment TROFF INPUT: .TP
@comment TROFF INPUT: .I /usr/local/share/myspell/myspell-x.y.z/spell.awk

@item @i{/usr/local/share/myspell/myspell-x.y.z/spell.awk}
Spell checker source program.
@comment  ========================================================
@comment TROFF INPUT: .SH "SEE ALSO"

@end table

@c ---------------------------------------------------------------------

@node SEE ALSO

@section SEE ALSO
@c DEBUG: print_menu("SEE ALSO")

@comment TROFF INPUT: .BR aspell (1),
@b{aspell}@r{(1),}
@comment TROFF INPUT: .BR dehtml (1),
@b{dehtml}@r{(1),}
@comment TROFF INPUT: .BR deroff (1),
@b{deroff}@r{(1),}
@comment TROFF INPUT: .BR desgml (1),
@b{desgml}@r{(1),}
@comment TROFF INPUT: .BR detex (1),
@b{detex}@r{(1),}
@comment TROFF INPUT: .BR dexml (1),
@b{dexml}@r{(1),}
@comment TROFF INPUT: .BR ispell (1),
@b{ispell}@r{(1),}
@comment TROFF INPUT: .BR locale (1),
@b{locale}@r{(1),}
@comment TROFF INPUT: .BR sort (1),
@b{sort}@r{(1),}
@comment TROFF INPUT: .BR spell (1),
@b{spell}@r{(1),}
@comment TROFF INPUT: .BR tr (1).
@b{tr}@r{(1).}
@comment  ========================================================
@comment TROFF INPUT: .SH BUGS

@node BUGS

@section BUGS
@c DEBUG: print_menu("BUGS")

No options are provided to select language variants, such as
American, Canadian, and British English.  These can still be
handled with supplemental dictionaries specified with the
@comment TROFF INPUT: .B \-dictionary
@b{@minus{}dictionary}
or
@comment TROFF INPUT: .B \-privatedictionary
@b{@minus{}privatedictionary}
options.
@comment TROFF INPUT: .PP

Much more work needs to be done to provide language-specific
suffix-rule files, and to collect dictionaries for many more
languages.
@comment  ========================================================
@comment TROFF INPUT: .SH AUTHOR

@node AUTHOR

@section AUTHOR
@c DEBUG: print_menu("AUTHOR")

@comment TROFF INPUT: .nf

@c ---------------------------------------------------------------------
@display
Nelson H. F. Beebe
Center for Scientific Computing
University of Utah
Department of Mathematics, 110 LCB
155 S 1400 E RM 233
Salt Lake City, UT 84112-0090
Tel: +1 801 581 5254
FAX: +1 801 581 4148
Email: @t{beebe@@math.utah.edu}, @t{beebe@@acm.org},
       @t{beebe@@ieee.org}, @t{beebe@@computer.org} (Internet)
WWW URL: @t{http://www.math.utah.edu/~beebe}
@comment TROFF INPUT: .fi

@end display

@c ---------------------------------------------------------------------
@comment =====================================================================
@comment  This is for GNU Emacs file-specific customization:
@comment  Local Variables:
@comment  fill-column: 60
@comment  End:
@bye
